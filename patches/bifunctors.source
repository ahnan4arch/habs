Index: habs/haskell-bifunctors/src/bifunctors-5.2.1/src/Data/Bifunctor/TH.hs
===================================================================
--- habs.orig/haskell-bifunctors/src/bifunctors-5.2.1/src/Data/Bifunctor/TH.hs
+++ habs/haskell-bifunctors/src/bifunctors-5.2.1/src/Data/Bifunctor/TH.hs
@@ -672,7 +672,7 @@ buildTypeInstanceFromTys biClass tyConNa
         droppedTyVarNames = concatMap tyVarNamesOfType droppedTysExpSubst
 
     -- If any of the dropped types were polykinded, ensure that there are of kind
-    -- * after substituting * for the dropped kind variables. If not, throw an error.
+    -- after substituting for the dropped kind variables. If not, throw an error.
     unless (all hasKindStar droppedTysExpSubst) $
       derivingKindError biClass tyConName
 
@@ -689,8 +689,8 @@ buildTypeInstanceFromTys biClass tyConNa
         remainingTysExpSubst' =
           map (substNamesWithKindStar kvNames') remainingTysExpSubst
 
-        -- We now substitute all of the specialized-to-* kind variable names with
-        -- *, but in the original types, not the synonym-expanded types. The reason
+        -- We now substitute all of the specialized-to-X kind variable names with
+        -- , but in the original types, not the synonym-expanded types. The reason
         -- we do this is a superficial one: we want the derived instance to resemble
         -- the datatype written in source code as closely as possible. For example,
         -- for the following data family instance:
