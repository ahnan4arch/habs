#!/usr/bin/env bash
# Generate a minimal filesystem for archlinux and load it into the local
# docker as an image
# Original from: https://github.com/docker/docker/tree/master/contrib
# Requires root
set -eu

rundir="$(dirname $(readlink -f $0))"
. ${rundir}/useful.sh

hash pacstrap &>/dev/null || {
    die "Could not find pacstrap. Run pacman -S arch-install-scripts"
}

arch=$(uname -m)
image_pfx=arch/habs

usage() {
    cat << EOF
Usage: mkimage-arch.sh [options]

Generate a filesystem for building habs and load it into the local docker

Options:
-h          This help
-a <arch>   Architecture to build for, i686 or x86_64 (default: local arch)
-n <pfx>    Prefix for name of docker image (default: arch/habs)

The image's complete name will be "<pfx>-<arch>".
EOF
}

while getopts ha:n: opt; do
    case "${opt}" in
        h) usage; exit 0 ;;
        a) if [[ "x${OPTARG}" == "xi686" ]]; then
                arch=i686
            else
                arch=x86_64
            fi
            ;;
        n) image_pfx="${OPTARG}" ;;
    esac
done

image_name=${image_pfx}-${arch}
rootfs=$(mktemp -u "${TMPDIR:-/var/tmp}/${image_name/\//_}-XXXXXXXXXX")
pacman_conf=$(mktemp "${TMPDIR:-/var/tmp}/${image_name/\//_}-XXXXXXXXXX-pacman.conf")

cat > "${pacman_conf}" << EOF
[options]
HoldPkg = pacman libc
Architecture = auto
SigLevel = Never

##[repo]
##Server = file:///repo

#[haskell-testing]
#Server = http://xsounds.org/~haskell/testing/\$arch

[haskell-core]
Server = http://xsounds.org/~haskell/core/\$arch

[core]
Include = /etc/pacman.d/mirrorlist

[extra]
Include = /etc/pacman.d/mirrorlist

[community]
Include = /etc/pacman.d/mirrorlist
EOF

# packages to remove for space savings
PKGREMOVE="linux jfsutils lvm2 cryptsetup groff man-db man-pages mdadm pciutils pcmciautils reiserfsprogs s-nail xfsprogs"

setarch ${arch} mkarchroot -C ${pacman_conf} \
    -M /usr/share/devtools/makepkg-${arch}.conf ${rootfs} \
    base base-devel haveged curl sudo ghc

setarch ${arch} arch-chroot ${rootfs} \
    pacman -Rncs --noconfirm ${PKGREMOVE}
sed -e 's/##//g' ${pacman_conf} > ${rootfs}/etc/pacman.conf
setarch ${arch} arch-chroot ${rootfs} \
    /bin/sh -c "haveged -w 1024; pacman-key --init; pkill haveged; pacman -Rs --noconfirm haveged; pacman-key --populate archlinux"
setarch ${arch} arch-chroot ${rootfs} \
    /bin/sh -c "ln -sf /usr/share/zoneinfo/UTC /etc/localtime"
echo 'en_US.UTF-8 UTF-8' > ${rootfs}/etc/locale.gen
setarch ${arch} arch-chroot ${rootfs} \
    locale-gen
setarch ${arch} arch-chroot ${rootfs} \
    /bin/sh -c 'echo "Server = https://mirrors.kernel.org/archlinux/\$repo/os/\$arch" > /etc/pacman.d/mirrorlist'
setarch ${arch} arch-chroot ${rootfs} \
    /bin/sh -c 'echo "Server = https://ftp.lysator.liu.se/pub/archlinux/\$repo/os/\$arch" >> /etc/pacman.d/mirrorlist'
mkdir ${rootfs}/repo
touch ${rootfs}/repo/repo.db
setarch ${arch} arch-chroot ${rootfs} \
    useradd --no-create-home --home-dir / -g users -G wheel -s /bin/bash habs
cat << EOF > ${rootfs}/etc/sudoers
%wheel ALL=(ALL) NOPASSWD: ALL
EOF

tar --numeric-owner -C ${rootfs} -c . | docker import - ${image_name}
docker run --rm ${image_name} echo Success.
