#! /bin/bash

set -eu

rundir="$(dirname $(readlink -f $0))"
. ${rundir}/useful.sh

# default values
srcarch=sources.tar.gz
chrootdir=.
outputdir=_output

usage() {
    cat << EOF
EOF
}

copy_results() {
    msg "Collecting all built packages"
    cp */*-x86_64.pkg.tar.xz ${output_x86_64}
    cp */*-i686.pkg.tar.xz ${output_i686}
}
trap copy_results ERR

# parse command line options
while getopts hs:l:o: opt; do
    case "${opt}" in
        h) usage; exit 0;;
        s) srcarch=${OPTARG};;
        l) chrootdir=${OPTARG};;
        o) outputdir=${OPTARG};;
    esac
done
shift $((OPTIND - 1))
output_i686=${outputdir}/i686
output_x86_64=${outputdir}/x86_64

# unpack source archive
msg "Unpacking source archive"
if [[ ! -f ${srcarch} ]]; then
    printf "No source archive: %s\n" ${srcarch}
    exit 1
fi
tar -x -f ${srcarch}

# unpack source packages
msg "Unpacking source packages"
for f in *.src.tar.gz; do
    tar -x -f $f
done

# download makeahpkg from github (if not present)
if [[ ! -f makeahpkg ]]; then
    msg "Downloading makeahpkg from github"
    curl -L -O https://github.com/archhaskell/habs/raw/master/makeahpkg
    chmod +x makeahpkg
else
    msg "Found local makeahpkg"
fi

# create output dir
[[ -d ${output_i686} ]] || mkdir -p ${output_i686}
[[ -d ${output_x86_64} ]] || mkdir -p ${output_x86_64}

# build x86_64, redirect stderr+stdout
msg "Start x86_64 build.."
./makeahpkg -a x86_64 -x -l ${chrootdir} -m -- $(cat build-order) \
    1> ${outputdir}/stdout_x86_64.out \
    2> ${outputdir}/stderr_x86_64.out
msg "Done"

# build i686, redirect stderr+stdout
msg "Start i686 build.."
./makeahpkg -a i686 -x -l ${chrootdir} -m -- $(cat build-order) \
    1> ${outputdir}/stdout_i686.out \
    2> ${outputdir}/stderr_i686.out
msg "Done"

# copy build results
copy_results

msg "Build done"
